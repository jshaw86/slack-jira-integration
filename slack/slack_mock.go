// Code generated by MockGen. DO NOT EDIT.
// Source: ../../slack/slack.go

// Package slack is a generated GoMock package.
package slack

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	slack "github.com/slack-go/slack"
)

// MockSlacker is a mock of Slacker interface.
type MockSlacker struct {
	ctrl     *gomock.Controller
	recorder *MockSlackerMockRecorder
}

// MockSlackerMockRecorder is the mock recorder for MockSlacker.
type MockSlackerMockRecorder struct {
	mock *MockSlacker
}

// NewMockSlacker creates a new mock instance.
func NewMockSlacker(ctrl *gomock.Controller) *MockSlacker {
	mock := &MockSlacker{ctrl: ctrl}
	mock.recorder = &MockSlackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlacker) EXPECT() *MockSlackerMockRecorder {
	return m.recorder
}

// getConversationReplies mocks base method.
func (m *MockSlacker) getConversationReplies(arg0 *slack.GetConversationRepliesParameters) ([]slack.Message, bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getConversationReplies", arg0)
	ret0, _ := ret[0].([]slack.Message)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// getConversationReplies indicates an expected call of getConversationReplies.
func (mr *MockSlackerMockRecorder) getConversationReplies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getConversationReplies", reflect.TypeOf((*MockSlacker)(nil).getConversationReplies), arg0)
}

// getConversations mocks base method.
func (m *MockSlacker) getConversations(arg0 *slack.GetConversationsParameters) ([]slack.Channel, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getConversations", arg0)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// getConversations indicates an expected call of getConversations.
func (mr *MockSlackerMockRecorder) getConversations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getConversations", reflect.TypeOf((*MockSlacker)(nil).getConversations), arg0)
}

// postMessage mocks base method.
func (m *MockSlacker) postMessage(arg0, arg1, arg2 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "postMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// postMessage indicates an expected call of postMessage.
func (mr *MockSlackerMockRecorder) postMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "postMessage", reflect.TypeOf((*MockSlacker)(nil).postMessage), arg0, arg1, arg2)
}
